<?php


/**
 * Implements hook_menu().
 */
function mw_feeds_menu() {
  $items = array();

  $items['admin/config/mw_feeds'] = array(
    'title' => 'Configure MW Feeds / Workamajig Integration',
    'description' => '',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/mw_feeds/settings'] = array(
    'title' => 'Configure MW Feeds/Workamajig Integration',
    'description' => 'Select which content types will integrate w/ the API, etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mw_feeds_settings_form'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

function mw_feeds_settings_form() {
  $form = array();

  $types = node_type_get_types();
  $content_types = array();
  foreach($types as $type){
    $content_types[$type->type] = $type->name;
  }

  $form['mw_feeds_excluded_types'] = array(
     '#type' => 'checkboxes',
     '#title'=> t('Exclude These Content Types from Workamajig Integration:'),
     '#default_value' => variable_get('mw_feeds_excluded_types', array()),
     '#options' => $content_types,

  );
  return system_settings_form($form);
}



function mw_feeds_node_update($node){

}

function mw_feeds_node_insert($node){

}

function mw_feeds_form_alter(&$form, &$form_state, $form_id) {
  $api_types = array_keys(variable_get('mw_feeds_excluded_types', array()));
  array_walk($api_types, function(&$item) { $item .= '_node_form'; });
  switch(true){
    case in_array('campaign_node_form', $api_types):
      //ALWAYS set to true. This how we know it's an update from the form not the feed.
      $form['field_feeds_update_flag']['und'][0]['value']['#default_value'] = 1;
      $form['field_feeds_update_flag']['und'][0]['value']['#attributes']['READONLY'] = 'READONLY';


      //$form['#validate'][] = 'mw_feeds_project_id_validate';

      break;
    default:
      break;
  }
}

/*function mw_feeds_project_id_validate(&$form, &$form_state){
  $project_id = false;
  $project_id = @$form_state['values']['field_projectnumber']['und'][0]['value'];;
  if($project_id){
    //example duplicate MW-540-28738-001
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'campaign')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_projectnumber', 'value', $project_id, '=')
      ->range(0, 10)
      ->addMetaData('account', user_load(1));

    $nid = @$form_state['build_info']['args'][0]->nid;
    if($nid && $nid > 0){
      $query->entityCondition('entity_id', $nid, '!=');
    }
    $result = $query->execute();
    if(count($result['node']) > 0){
      return form_set_error('field_projectnumber', t('This Project Number is already in use. Project Number must be unique across all Campaigns'));
    }
  }
}*/



function mw_feeds_node_postinsert($node) {
    watchdog('grid', 'post_insert');

  if(@$node->field_feeds_update_flag['und'][0]['value'] != '1'){
    //exit to prevent infinite loop
    watchdog('grid', 'post update exited to prevent infinite loop');
    dsm('post update exited to prevent infinite loop');
    return;
  }



  $api_types = array_keys(variable_get('mw_feeds_excluded_types', array()));
  if(in_array($node->type, $api_types) && $node->status == 1){//one of our target nodes for API integration, and node is published
    watchdog('grid', print_r($node, true));
    $projectNumber = @$node->field_projectnumber['und'][0]['value'];
    if($projectNumber){
      watchdog('grid', 'project number found');
      //1. This node was likely not inserted by feeds and therefore is not in the feeds_item table.
      //We need to save it there in order for this import to do squat diddle.
      //HACKAGE! this ensures that feeds will udpate this node. Without this it would just ignore the node.
      db_query("insert into feeds_item (id,entity_type, entity_id, guid, hash, feed_nid, url)
      select 'json_update_node_by_project_id', 'node', n.nid,
      :projectnumber, '', 0, ''
      from node as n
      left outer join feeds_item as b
      on (n.nid = b.entity_id and b.id = 'json_update_node_by_project_id')
      where b.entity_id is null and n.nid=:nid;", array(':projectnumber' => $projectNumber, ':nid' => $node->nid));

      //2. manually run import, with custom URL parameter and auth headers.
      $importer_id = 'json_update_node_by_project_id';
      $source = feeds_source($importer_id);
      $fetcher_config = $source->getConfigFor($source->importer->fetcher);
      $fetcher_config['source'] = 'https://app18.workamajig.com/api/beta1/projects?id=' . $projectNumber;
      $fetcher_config['bundle'] = $node->type;
      $source->setConfigFor($source->importer->fetcher, $fetcher_config);
      $source->save();
      watchdog('feeds_source', print_r($source, true));
      $source->startImport();
    }else{
      watchdog('grid', 'project number not found.');
    }
  }
}

function mw_feeds_node_postupdate($node) {
  if(@$node->field_feeds_update_flag['und'][0]['value'] != '1'){
    //exit to prevent infinite loop
    watchdog('grid', 'post update exited to prevent infinite loop');
    dsm('post update exited to prevent infinite loop');
    return;
  }



  $api_types = array_keys(variable_get('mw_feeds_excluded_types', array()));
  if(in_array($node->type, $api_types) && $node->status == 1){//one of our target nodes for API integration, and node is published
    watchdog('grid', print_r($node, true));
    $projectNumber = @$node->field_projectnumber['und'][0]['value'];
    if($projectNumber){
      watchdog('grid', 'project number found');
      //1. This node was likely not inserted by feeds and therefore is not in the feeds_item table.
      //We need to save it there in order for this import to do squat diddle.
      //HACKAGE! this ensures that feeds will udpate this node. Without this it would just ignore the node.
      db_query("insert into feeds_item (id,entity_type, entity_id, guid, hash, feed_nid, url)
      select 'json_update_node_by_project_id', 'node', n.nid,
      :projectnumber, '', 0, ''
      from node as n
      left outer join feeds_item as b
      on (n.nid = b.entity_id and b.id = 'json_update_node_by_project_id')
      where b.entity_id is null and n.nid=:nid;", array(':projectnumber' => $projectNumber, ':nid' => $node->nid));

      //2. manually run import, with custom URL parameter and auth headers.
      $importer_id = 'json_update_node_by_project_id';
      $source = feeds_source($importer_id);
      $fetcher_config = $source->getConfigFor($source->importer->fetcher);
      $fetcher_config['source'] = 'https://app18.workamajig.com/api/beta1/projects?id=' . $projectNumber;
      $fetcher_config['bundle'] = $node->type;
      $source->setConfigFor($source->importer->fetcher, $fetcher_config);
      $source->save();
      watchdog('feeds_source', print_r($source, true));
      $source->startImport();
    }else{
      watchdog('grid', 'project number not found.');
    }
  }
}


function mw_feeds_feeds_presave(FeedsSource $source, $entity, $item) {
  $api_types = array_keys(variable_get('mw_feeds_excluded_types', array()));
  if(in_array($entity->type, $api_types) && $entity->status == 1){
    //watchdog('mw_grid_source_presave', '<pre>' . print_r($source, true) . '</pre>');
    //watchdog('mw_grid_feed_presave_item', '<pre>' . print_r($item, true) . '</pre>');

    $campaign_id_tax = taxonomy_get_term_by_name($item['campaign'], 'campaign_id');
    //watchdog('campaigntax_id_load','<pre>' . print_r($campaign_id_tax,true) . '</pre>');
    if($campaign_id_tax && count($campaign_id_tax) > 0){ //term exists
      $campaign_id_tax = array_pop($campaign_id_tax);
      $entity->field_campaign_id_tax['und'][0]['target_id'] = $campaign_id_tax->tid;
    }else{//term does not exists, let's make it
      $campaign_id_tax = new stdClass();
      $campaign_id_tax->name = $item['campaign'];
      $campaign_id_tax->parent = 0;
      $campaign_id_tax->vid = 2;//campaign vocabulary
      taxonomy_term_save($campaign_id_tax);
      $entity->field_campaign_id_tax['und'][0]['tid'] = $campaign_id_tax->tid;
      //watchdog('mw_grid_feed_presave_entity', '<pre>' . print_r($entity,true) . '</pre>');
    }

  }
}
